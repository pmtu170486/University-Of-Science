//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace WinAppStore.EmployeeServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NhanVien", Namespace="http://schemas.datacontract.org/2004/07/wsEmployees.dao")]
    public partial class NhanVien : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string addressField;
        
        private int idField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeeServices.IEmployeeSer")]
    public interface IEmployeeSer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeSer/getall", ReplyAction="http://tempuri.org/IEmployeeSer/getallResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WinAppStore.EmployeeServices.NhanVien>> getallAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeSer/create", ReplyAction="http://tempuri.org/IEmployeeSer/createResponse")]
        System.Threading.Tasks.Task createAsync(WinAppStore.EmployeeServices.NhanVien nv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeSer/delete", ReplyAction="http://tempuri.org/IEmployeeSer/deleteResponse")]
        System.Threading.Tasks.Task deleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeSer/update", ReplyAction="http://tempuri.org/IEmployeeSer/updateResponse")]
        System.Threading.Tasks.Task updateAsync(WinAppStore.EmployeeServices.NhanVien nv);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeSerChannel : WinAppStore.EmployeeServices.IEmployeeSer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeSerClient : System.ServiceModel.ClientBase<WinAppStore.EmployeeServices.IEmployeeSer>, WinAppStore.EmployeeServices.IEmployeeSer {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EmployeeSerClient() : 
                base(EmployeeSerClient.GetDefaultBinding(), EmployeeSerClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IEmployeeSer.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeSerClient(EndpointConfiguration endpointConfiguration) : 
                base(EmployeeSerClient.GetBindingForEndpoint(endpointConfiguration), EmployeeSerClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeSerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EmployeeSerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeSerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EmployeeSerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeSerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WinAppStore.EmployeeServices.NhanVien>> getallAsync() {
            return base.Channel.getallAsync();
        }
        
        public System.Threading.Tasks.Task createAsync(WinAppStore.EmployeeServices.NhanVien nv) {
            return base.Channel.createAsync(nv);
        }
        
        public System.Threading.Tasks.Task deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
        
        public System.Threading.Tasks.Task updateAsync(WinAppStore.EmployeeServices.NhanVien nv) {
            return base.Channel.updateAsync(nv);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEmployeeSer)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEmployeeSer)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/wsEmployees/EmployeeManagement/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return EmployeeSerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IEmployeeSer);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return EmployeeSerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IEmployeeSer);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IEmployeeSer,
        }
    }
}
